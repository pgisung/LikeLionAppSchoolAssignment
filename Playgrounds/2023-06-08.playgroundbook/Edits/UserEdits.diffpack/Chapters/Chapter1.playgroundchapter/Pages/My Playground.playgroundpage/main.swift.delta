<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>Diff</key>
	<array>
		<dict>
			<key>ModifiedContent</key>
			<string>//// 두 개의 변수의 값을 서로 맞바꾸는 코드는? / 함수는?
//
//var a: Int = 10
//var b: Int = 12
//var temp: Int = 0
//
//// 우리가 원하는 결과는
//// a: 12, b: 10
//
//temp = a
//a = b
//b = temp
//print("a: \(a), b: \(b)")
//
//func swapTwoInts(a: Int, b: Int) -&gt; (Int, Int) {
//    var numA = a
//    var numB = b
//    var temp: Int = 0
//    
//    temp = numA
//    numA = numB
//    numB = temp
//    
//    return (numA, numB)
//}
//
////print("\(swapTwoInts(a: 10, b: 22))")
//
//let (num1, num2) = swapTwoInts(a: 10, b: 22)
//print(num1)
//print(num2)
//
//var n_a: Int = 10
//var n_b: Int = 20
//(n_a, n_b) = (n_b, n_a)
//
//print("a: \(n_a), b: \(n_b)")

//----------------------------------------------------

//func quickSort(array: [Int]) -&gt; [Int] {
//    
//    guard array.count &gt; 1 else {
//        return array
//    }
//    
//    var sortedArray = array
//    
//    let pivot: Int = sortedArray.last ?? -1
//    
//    var leftArray: [Int] = []
//    var rightArray: [Int] = []
//    
//    for index in 0..&lt;(sortedArray.count - 1) {
//        let item: Int = sortedArray[index]
//        
//        if item &lt; pivot {
//            leftArray.append(item)
//        } else {
//            rightArray.append(item)
//        }
//    }
//    
//    print("-------------------------------")
//    print("pivot: \(pivot)")
//    print("leftArray: \(leftArray)")
//    print("rightArray: \(rightArray)")
//    print("-------------------------------")
//    
//    leftArray = quickSort(array: leftArray)
//    rightArray = quickSort(array: rightArray)
//    
//    sortedArray = leftArray + [pivot] + rightArray
//    
//    return sortedArray
//}
//
//print("quickSort: \(quickSort(array: [3, 7, 8, 5, 2, 1, 9, 6, 4]))")

//----------------------------------------------------

func bubbleSort(array: [Int]) -&gt; [Int] {
    
    guard array.count &gt; 1 else {
        return array
    }
    
    var sortedArray = array
    
    for index in 0..&lt;sortedArray.count - 1 {
        let number1 = sortedArray[index]
        let number2 = sortedArray[index + 1]
        
        if number1 &gt; number2 {
            // 바꿔준다
            print("Change! \(number1), \(number2)")
            let numberTemp = sortedArray[index]
            sortedArray[index] = sortedArray[index + 1]
            sortedArray[index + 1] = numberTemp
        } else {
            print("PASS! \(number1), \(number2)")
        }
    }
    
    print("sortedArray: \(sortedArray)")
    
    let numberLast = sortedArray.last ?? -1
    print("numberLast: \(numberLast)")
    
    var subArray: [Int] = []
    
    for index in 0..&lt;sortedArray.count - 1 {
        subArray.append(sortedArray[index])
    }
    print("subArray: \(subArray)")
    
    sortedArray = bubbleSort(array: subArray) + [numberLast]
    
    return sortedArray
}

print("bubbleSort: \(bubbleSort(array: [3, 7, 8, 5, 2, 1, 9, 6, 4]))")

//----------------------------------------------------

//// function to swap between param1 and param2
//func doSwap&lt;T: Comparable&gt;(_ param1: inout T, _ param2: inout T) {
//    var tempParam: T = param1
//    param1 = param2
//    param2 = tempParam
//}
//
//// to make heap data structure which is a kind of complete binary tree
//func doCreateHeap&lt;T: Comparable&gt;(targetArray: inout [T], leftNodeNum: Int, rightNodeNum: Int) {
//    for nodeNum in leftNodeNum...rightNodeNum {
//        // complete binary tree always have to be filled with leftNode first
//        var currentNodeNum: Int = leftNodeNum
//        // there is no such an nodeNum below 0 
//        while ( currentNodeNum &gt; 0 ) {
//            // parentNodeNum is always a half of childNodeNum
//            var parentNodeNum: Int = ( currentNodeNum - 1 ) &gt;&gt; 1
//            if ( targetArray[parentNodeNum] &lt; targetArray[currentNodeNum] ) {
//                doSwap(&amp;targetArray[parentNodeNum] , &amp;targetArray[currentNodeNum])
//            }
//            currentNodeNum = parentNodeNum
//        }
//    }
//}

//----------------------------------------------------

//void __makeHeap(int *arr, int left, int right) {
//    for(int i=left; i&lt;=right; i++) {
//        int now = i;
//        while(now &gt; 0) {
//            int par = now-1&gt;&gt;1;
//            if(arr[par] &lt; arr[now]) __swap(arr+par, arr+now);
//            now = par;
//        }
//    }
//}
//
//void __heapSort(int *arr, int left, int right) {
//    __makeHeap(arr, left, right);
//    for(int i=right; i&gt;left; i--) {
//        __swap(arr, arr+i);
//        int left = 1, right = 2;
//        int sel = 0, par = 0;
//        while(1) {
//            if(left &gt;= i) break;
//            if(right &gt;= i) sel = left;
//            else {
//                if(arr[left] &lt; arr[right]) sel = right;
//                else sel = left;
//            }
//            if(arr[sel] &gt; arr[par]) {
//                __swap(arr+sel, arr+par);
//                par = sel;
//            } else break;
//            left = (par&lt;&lt;1) + 1;
//            right = left+1;
//        }
//    }
//}
//
//void __insertionSort(int arr[], int left, int right) {
//    for(int i=left; i&lt;right; i++) {
//        int key = arr[i+1];
//        int j;
//        for(j=i; j&gt;=left; j--) {
//            if(arr[j] &gt; key) arr[j+1] = arr[j];
//            else break;
//        }
//        arr[j+1] = key;
//    }
//}
//
//
//void __quickSort(int arr[], int left, int right, int depth) {
//    if(depth == 0) {
//        int size = right-left+1;
//        if(size &gt; 16) {
//            __heapSort(arr, left, right);
//        }
//        return;
//    }
//
//    int i = left, j = right;
//    int pivot = arr[(left + right) / 2];
//    int temp;
//    do {
//        while (arr[i] &lt; pivot)
//            i++;
//        while (arr[j] &gt; pivot)
//            j--;
//        if (i&lt;= j) {
//            __swap(arr+i, arr+j);
//            i++;
//            j--;
//        }
//    } while (i&lt;= j);
//
//    if (left &lt; j)
//        __quickSort(arr, left, j, depth-1);
//
//    if (i &lt; right)
//        __quickSort(arr, i, right, depth-1);
//
//}
//
//void introSort(int arr[], int n) {
//    int limit = 2*ceil(log2(n));
//    if(n &lt;= 16){
//        __insertionSort(arr, 0, n-1);
//        return;
//    }
//    __quickSort(arr, 0, n-1, limit);
//    __insertionSort(arr, 0, n-1);
//}
</string>
			<key>ModifiedRange</key>
			<string>{0, 6231}</string>
			<key>OriginalContent</key>
			<string>
</string>
			<key>OriginalRange</key>
			<string>{0, 1}</string>
		</dict>
	</array>
	<key>File</key>
	<string>Chapters/Chapter1.playgroundchapter/Pages/My Playground.playgroundpage/main.swift</string>
</dict>
</plist>
